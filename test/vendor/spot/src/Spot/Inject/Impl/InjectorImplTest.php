<?php

namespace Spot\Inject\Impl;

use Spot\SpotBuilder;
use Spot\Inject\Provides;
use Spot\Inject\Singleton;

class UnitTestModule {

    /** @Provides("Spot\Inject\Impl\UnitTestModule") @Singleton */
    static function provideSingleton(self $self) {
        return $self;
    }

}

class ForkedModule {

    /** @Provides("Spot\Inject\Impl\ForkedModule") @Singleton */
    static function provideSingleton(self $self) {
        return $self;
    }

}

class DuplicateModule {

    /** @Provides("Spot\Inject\Impl\DuplicateModule") @Singleton */
    static function provideDuplicate(DuplicateModule $module) {
        return $module;
    }

    /** @Provides("Spot\Inject\Impl\DuplicateModule") */
    static function provideSelf(self $module) {
        return $module;
    }

}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-10 at 05:33:34.
 */
class InjectorImplTest extends \PHPUnit_Framework_TestCase {

    /**
     *
     * @var InjectorImpl
     */
    private $injector;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->injector = (new SpotBuilder(__DIR__))
                ->buildDev()
                ->get()
                ->createInjector(__NAMESPACE__ . '\UnitTestModule');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    public function test_singletons_identities_should_be_equals() {
        $s1 = $this->injector->getInstance(__NAMESPACE__ . '\UnitTestModule');
        $s2 = $this->injector->getInstance(__NAMESPACE__ . '\UnitTestModule');

        $this->assertTrue($s2 === $s1);
    }

    function test_forked_injector_should_return_same_singletons_when_binded_in_parents() {
        $forked = $this->injector->fork([__NAMESPACE__ . '\ForkedModule']);

        $this->assertTrue(
                $this->injector->getInstance(__NAMESPACE__ . '\UnitTestModule') ===
                $forked->getInstance(__NAMESPACE__ . '\UnitTestModule')
        );
    }

    function test_forked_injector_should_return_different_singletons_when_binded_in_child() {
        $forked = $this->injector->fork([__NAMESPACE__ . '\ForkedModule']);

        $this->assertFalse(
                $this->injector->getInstance(__NAMESPACE__ . '\ForkedModule') ===
                $forked->getInstance(__NAMESPACE__ . '\ForkedModule')
        );
    }

    function test_duplicate_binding() {
        try {
            $this->injector->fork([__NAMESPACE__ . '\DuplicateModule'])
                    ->getInstance(__NAMESPACE__ . '\SingletonDuplicateModule');

            $this->fail('Duplicate binding should raise an exception');
        } catch (\LogicException $e) {
            var_dump($e->getMessage());
        }
    }

    function test_singleton_duplicate_binding() {
        try {
            $this->injector->fork([__NAMESPACE__ . '\DuplicateModule'])
                    ->getInstance(__NAMESPACE__ . '\DuplicateModule');

            $this->fail('Duplicate binding should raise an exception');
        } catch (\LogicException $e) {
            
        }
    }

}
